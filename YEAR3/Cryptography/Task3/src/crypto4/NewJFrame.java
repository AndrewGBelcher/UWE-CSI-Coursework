/**
 * @title TASK 3: SHA1 HASH BRUTEFORCER
 * @author Andrew Belcher
 */
package crypto4;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import static jdk.nashorn.internal.objects.NativeMath.random;
import java.security.SecureRandom;
import java.util.regex.Pattern;


public class NewJFrame extends javax.swing.JFrame {

    private static final String CHAR_LOWER = "abcdefghijklmnopqrstuvwxyz";
    private static final String CHAR_UPPER = CHAR_LOWER.toUpperCase();
    private static final String NUMBER = "0123456789";
    private static final String DATA_FOR_RANDOM_STRING = CHAR_LOWER + NUMBER;
    private static SecureRandom random = new SecureRandom();
    
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("hash");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("crack 0-6 pass");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jLabel1.setText("SHA1 hash gen/cracker");

        jButton3.setText("crack BCH 10 6");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * converts byte array to hex string
     * @param data byte array of the raw data
     * @return the converted hex string
     */
    private static String convert_to_hex(byte[] data) 
    { 
        StringBuffer buf = new StringBuffer(); 
        
        for (int i = 0; i < data.length; i++) 
        { 
        	int halfbyte = (data[i] >>> 4) & 0x0F; 
        	int two_halfs = 0; 
        	do 
                { 
	            if ((0 <= halfbyte) && (halfbyte <= 9)) 
	                buf.append((char) ('0' + halfbyte)); 
	            else 
	            	buf.append((char) ('a' + (halfbyte - 10))); 
                    
	            halfbyte = data[i] & 0x0F; 
        	} 
                while(two_halfs++ < 1); 
        } 
        return buf.toString(); 
    } 
  
    /**
     * SHA-1 generation from string
     * @param text the string input to hash
     * @return the SHA-1 hash as a string
     * @throws NoSuchAlgorithmException
     * @throws UnsupportedEncodingException 
     */
    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException  
    { 
	MessageDigest md; 
	md = MessageDigest.getInstance("SHA-1"); 
	byte[] sha1hash = new byte[40]; 
	md.update(text.getBytes("iso-8859-1"), 0, text.length()); 
	sha1hash = md.digest(); 
	return convert_to_hex(sha1hash); 
    } 
 
    


     /**
     * encodes a synadrome for BCH 10,6
     * @param d
     * @param mod modulo 
     * @return an array of the encoded synadrome
     */
    private int[] encodeSyn(int[] d, int mod)
    {
        int [] array = new int[10];

            //d7 = (4*d1+10*d2+9*d3+2*d4+d5+7*d6) mod 11 
            array[0]= (4 * d[0] +
                  10 * d[1] + 
                   9 * d[2] +
                   2 * d[3] +
                   d[4]     +
                   7 * d[5]
                   ) % mod;

            //d8 = (7*d1+8*d2+7*d3+d4+9*d5+6*d6) mod 11 
            array[1]= (7 * d[0] +
                   8 * d[1] + 
                   7 * d[2] +
                   d[3]     +
                   9 * d[4] +
                   6 * d[5]
                   ) % mod;

            //d9 = (9*d1+d2+7*d3+8*d4+7*d5+7*d6) mod 11 
            array[2]= (9 * d[0] +
                   d[1]     + 
                   7 * d[2] +
                   8 * d[3] +
                   7 * d[4] +
                   7 * d[5]
                   ) % mod;

            //d10 = (d1+2*d2+9*d3+10*d4+4*d5+d6) mod 11
            array[3] =(d[0]     +
                    2 * d[1] + 
                    9 * d[2] +
                   10 * d[3] +
                    4 * d[4] +
                    d[5]
                    ) % mod;

           return array;

    }

    /**
     * Decodes a synadrome for BCH 10,6
     * @param d
     * @param mod modulo
     * @return an array of the decoded synadrome
     */
    private int[] decodeSyn(int[] d, int mod)
    {
            int [] syn = new int[10];

            // s1= (d1+d2+d3+d4+d5+d6+d7+d8+d9+d10) mod 11
            for(int i=0; i<10; i++)
                syn[0] += d[i];
            
            syn[0] = syn[0]%mod;

            // s2= (d1+2*d2+3*d3+4*d4+5*d5+6*d6+7*d7+8*d8+9*d9
            // +10*d10) mod 11
            syn[1] = (d[0]+2 *
                    d[1]+3 *
                    d[2]+4 *
                    d[3]+5 *
                    d[4]+6 *
                    d[5]+7 *
                    d[6]+8 *
                    d[7]+9 *
                    d[8]+10 *
                    d[9])%mod;   

            //s3= (d1+4*d2+9*d3+5*d4+3*d5+3*d6+5*d7+9*d8
            // +4*d9+d10) mod 11

            syn[2]=(d[0] + 4 *
                    d[1] + 9 *
                    d[2] + 5 *
                    d[3] + 3 *
                    d[4] + 3 *
                    d[5] + 5 *
                    d[6] + 9 *
                    d[7] + 4 *
                    d[8] +
                    d[9]) % mod;

            // s4= (d1+8*d2+5*d3+9*d4+4*d5+7*d6+2*d7+6*d8
            // +3*d9+10*d10) mod 11

            syn[3]=(d[0] + 8 *
                    d[1] + 5 *
                    d[2] + 9 *
                    d[3] + 4 *
                    d[4] + 7 *
                    d[5] + 2 *
                    d[6] + 6 *
                    d[7] + 3 *
                    d[8] + 10 *
                    d[9]) % mod;   


            return syn;
    }
    
    
    /**
     * match password for the supplied hash
     * @param hash the hash string
     * @return the correct password string
     */
    private String crack_hash_alphanum(String hash)
    {
        String pass = null,hashGuess = "";
        char a= 0,b= 0,c= 0,d= 0,e= 0,f=0;

            // loop for 6 chars long
                for(int z = 0; z < 36; z++)
                {
                    for(int y = 0; y < 36; y++)
                    {
                        for(int x = 0; x < 36; x++)
                        {
                            for(int w = 0; w < 36; w++)
                            {
                                for(int v = 0; v < 36; v++)
                                {
                                    for(int u = 0; u < 36; u++)
                                    {
                                        // mathchs!
                                        if((hash.compareTo(hashGuess))==0)
                                            return pass;
                                        
                                        // interate password attempt
                                        else
                                        {

                                            a = DATA_FOR_RANDOM_STRING.charAt(u);
                                            b = DATA_FOR_RANDOM_STRING.charAt(v);
                                            c = DATA_FOR_RANDOM_STRING.charAt(w);
                                            d = DATA_FOR_RANDOM_STRING.charAt(x);
                                            e = DATA_FOR_RANDOM_STRING.charAt(y);
                                            f = DATA_FOR_RANDOM_STRING.charAt(z);

                                            pass = new StringBuilder().append(a).toString();

                                            if(v>0)
                                                pass = new StringBuilder().append(a).append(b).toString();
                                            if(w>0)
                                                pass = new StringBuilder().append(a).append(b).append(c).toString();                                       // ).append(a).append(b).append(c).append(d).append(e).append(f).toString();
                                            if(x>0)
                                                pass = new StringBuilder().append(a).append(b).append(c).append(d).toString();                                       // ).append(a).append(b).append(c).append(d).append(e).append(f).toString();
                                            if(y>0)
                                                pass = new StringBuilder().append(a).append(b).append(c).append(d).append(e).toString();                                       // ).append(a).append(b).append(c).append(d).append(e).append(f).toString();
                                            if(z>0)
                                                pass = new StringBuilder().append(a).append(b).append(c).append(d).append(e).append(f).toString();                                       // ).append(a).append(b).append(c).append(d).append(e).append(f).toString();
                                            

    
                                            try {
                                                hashGuess = SHA1(pass);
                                            } catch (NoSuchAlgorithmException ex) {
                                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                                            } catch (UnsupportedEncodingException ex) {
                                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }     
            }
           return "";
    }
     
    /**
     * generates full BCH string from a supplied number
     * @param num interative number for bruteforcing BCH
     * @return the full BCH string for that number
     */
    String gen_bch_10_6(int num)
    {
       int[] d = new int[10];
       String out = "";
       String str = String.format("%06d", num); // 0009      

       for(int i = 0; i<6; i++)
           d[i]= str.charAt(i)-48;

        //d7 = (4*d1+10*d2+9*d3+2*d4+d5+7*d6) mod 11 
        d[6]= (4 * d[0] +
              10 * d[1] + 
               9 * d[2] +
               2 * d[3] +
               d[4]     +
               7 * d[5]
               ) % 11;
        
        //d8 = (7*d1+8*d2+7*d3+d4+9*d5+6*d6) mod 11 
        d[7]= (7 * d[0] +
               8 * d[1] + 
               7 * d[2] +
               d[3]     +
               9 * d[4] +
               6 * d[5]
               ) % 11;
        
        //d9 = (9*d1+d2+7*d3+8*d4+7*d5+7*d6) mod 11 
        d[8]= (9 * d[0] +
               d[1]     + 
               7 * d[2] +
               8 * d[3] +
               7 * d[4] +
               7 * d[5]
               ) % 11;
        
        //d10 = (d1+2*d2+9*d3+10*d4+4*d5+d6) mod 11
        d[9] =(d[0]     +
                2 * d[1] + 
                9 * d[2] +
               10 * d[3] +
                4 * d[4] +
                d[5]
                ) % 11;

        for(int i = 0; i < 10; i++)
        {
            if(d[i]==10)
                out += 'x';
            else
                out += Integer.toString(d[i]);
        }

    return out;
}

    /**
     * matchs the correct BCH for the supplied hash
     * @param hash the hash string
     * @return the correct BCH string
     */
    private String crack_hash_bch(String hash)
    {
        String pass = null,hashGuess = "";

                for(int z = 0; z < 1000000; z++)
                {
                
                    pass = gen_bch_10_6(z);
                   // System.out.print("pass: "+ pass + "\n");
                    
                    try {
                          hashGuess = SHA1(pass);
                      } catch (NoSuchAlgorithmException ex) {
                          Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                      } catch (UnsupportedEncodingException ex) {
                          Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                      }

                    if((hash.compareTo(hashGuess))==0)
                        return pass;

                }
            
           return "";
    }
    
    
    /**
     * verify if BCH is valid
     * @param bch the string of the BCH number
     * @return boolean, if BCH is correct = true
     */
    private boolean validate_bch(String bch)
    {
        boolean valid;
        int[] d = new int[10];
        int[] syn = new int[10];
 
        // parse the code to our array
        for (int i = 0; i < 10; i++) 
            d[i] = Integer.parseInt(String.valueOf(bch.charAt(i)));

        // produce a decoded form of our synadromes to work with
        syn = decodeSyn(d,11);


        // no error only when all decoded synadromes are clear
        if(syn[0]+syn[1]+syn[2]+syn[3]==0)
        {
            System.out.println("its true");
            valid = true;
        }
        else
        {
            System.out.println("its false");
            valid = false;
        }
        return valid;
    }
    
    /**
     * verify input and produce hash, for BCH it will validate if the code is correct first
     */
    private void hash_string()
    {
           
        String s = jTextField1.getText();
        jTextArea1.setText("");
        
        // password must be 1-6 chars, or if its 10 we move on
        if(s.length() == 0 || (s.length() > 6 && s.length() != 10))
        {
            jTextArea1.setText("please enter a password up to 6 char long or a valid BCH 10,6!");
            return;
        }
        // if its 10 then it can be a BCH code, so check if it is all numeric
        else if(s.length() == 10 && Pattern.matches("[a-zA-Z]+", s))
        {
            jTextArea1.setText("please enter a BCH 10,6!");
            return;
        }
        // produce hash
        else
        {

            // BCH number isnt a valid bch
            if(s.length() == 10)
            {
                if(!validate_bch(s))
                {
                    //3745195876
                    jTextArea1.setText("please enter a valid BCH 10,6 number!");
                    return;
                }
            }
            else
            {
                try 
                {
                    jTextArea1.setText(
                            "string: " + s +"\n" +
                            "hash: " + SHA1(s) +"\n"                          
                           );

                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    /**
     * crack a hash of a plaintext password, limit is 6 char long and only lower case alphanum
     */
    private void crack_pass()
    {
    jTextArea1.setText("");
        
        String hash = jTextField1.getText();
        if(hash.length() != 40)
        {
            jTextArea1.setText("please enter a valid hash to crack");
            return;
        }
/*
        String[] hashList = new String[] {
        "c2543fff3bfa6f144c2f06a7de6cd10c0b650cae",
        "b47f363e2b430c0647f14deea3eced9b0ef300ce",
        "e74295bfc2ed0b52d40073e8ebad555100df1380",
        "0f7d0d088b6ea936fb25b477722d734706fe8b40",
        "77cfc481d3e76b543daf39e7f9bf86be2e664959",
        "5cc48a1da13ad8cef1f5fad70ead8362aabc68a1",
        "4bcc3a95bdd9a11b28883290b03086e82af90212",
        "7302ba343c5ef19004df7489794a0adaee68d285",
        "21e7133508c40bbdf2be8a7bdc35b7de0b618ae4",
        "6ef80072f39071d4118a6e7890e209d4dd07e504",
        "02285af8f969dc5c7b12be72fbce858997afe80a",
        "57864da96344366865dd7cade69467d811a7961b"
      };      */

       // for(int i=0; i < 3; i++)
       // {
            long start = System.currentTimeMillis();
            String pass = crack_hash_alphanum(hash);
           
            long end = System.currentTimeMillis();
            if(pass!="")
            {
                jTextArea1.setText("pass:"+pass+"\n"+ "found in: "+ (end-start) + " ms");
                System.out.print("pass:"+pass+"\n"+ "found in: "+ (((end-start)/1000)/60) + " minutes & "+((end-start)/1000)+ " seconds"+"\n");
                System.out.print("total milliseconds: "+ (end-start) +"\n");
            }
            else
                jTextArea1.setText("pass not found..");   
      //  }
        
    }
    
    /**
     * Crack a hash of a BCH 10,6 code, only valid ones apply
     */
    private void crack_bch()
    {
        jTextArea1.setText("");

        // parse hash
        String hash = jTextField1.getText();
        if(hash.length() != 40)
        {
            jTextArea1.setText("please enter a valid hash to crack");            
            return;
        }

        /*
        String[] hashList = new String[] {
        "902608824fae2a1918d54d569d20819a4288a4e4",
        "88d0b34055b79644196fce25f876bc1a5ef654d3",
        "5b8f495b7f02b62eb228c5dbece7c2f81b60b9a3"
            };*/

      //  for(int i=0; i < 3; i++)
      //  {            
            // crack and record time
            long start = System.currentTimeMillis();           
            String pass = crack_hash_bch(hash);
            long end = System.currentTimeMillis(); 

            // password has been found
            if(pass!="")
            {
                jTextArea1.setText("pass:"+pass+"\n"+ "found in: "+ (end-start) + " ms");
                System.out.print("pass:"+pass+"\n"+ "found in: "+ (((end-start)/1000)/60) + " minutes & "+((end-start)/1000)+ " seconds"+"\n");
                System.out.print("total milliseconds: "+ (end-start) +"\n");
            }
            else
                jTextArea1.setText("pass not found..");                
      //  }
      
    }
    
    // event for hashing password/bch string
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        hash_string();
    }//GEN-LAST:event_jButton1MouseClicked

    // event for cracking passwords 1-6 in length alphanum with upper case not supported                
    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        crack_pass();
    }//GEN-LAST:event_jButton2MouseClicked

    // event for cracking BCH 10,6
    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        crack_bch();
    }//GEN-LAST:event_jButton3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
